package com.zshgif.laugh.model;

import java.util.List;
import com.zshgif.laugh.dao.db.DaoSession;
import com.zshgif.laugh.dao.GifitemBeanDao;
import com.zshgif.laugh.dao.PictureBeanDao;
import com.zshgif.laugh.dao.db.DBHelper;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table GIFITEM_BEAN.
 */
public class GifitemBean {

    private Long id;
    /**
     * 内涵段子Id
     */
    private long NETid;
    /** Not-null value. */
    /**
     * 内容
     */
    private String content;
    /** Not-null value. */
    /**
     * 分类名称
     */
    private String category_name;
    /** Not-null value. */
    /**
     * 第一张图地址
     */
    private String firstOne;
    /**
     * gif图地址
     */
    private String gifUrl;
    /**
     * 宽度
     */
    private int width;
    /**
     * 高度
     */
    private int height;
    /**
     * 图片类型 1 单张图片  3 单张GIF  5 多图
     */
    private int type;
    /**
     * 赞
     */
    private int digg_count;
    /**
     * 鄙视
     */
    private int bury_count;
    /**
     * 评论数
     */
    private int comments_count;
    /** Not-null value. */
    /**
     * 分享地址
     */
    private String share_url;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GifitemBeanDao myDao;

    private List<PictureBean> large_image_list;

    /**
     * 评论者
     */
    private CommentsBean comments;

    /**
     * 发布者
     */
    private ReleaseUser releaseUser;


    public GifitemBean() {
    }

    public GifitemBean(Long id) {
        this.id = id;
    }

    public GifitemBean(Long id, long NETid, String content, String category_name, String firstOne, String gifUrl, int width, int height, int type, int digg_count, int bury_count, int comments_count, String share_url) {
        this.id = id;
        this.NETid = NETid;
        this.content = content;
        this.category_name = category_name;
        this.firstOne = firstOne;
        this.gifUrl = gifUrl;
        this.width = width;
        this.height = height;
        this.type = type;
        this.digg_count = digg_count;
        this.bury_count = bury_count;
        this.comments_count = comments_count;
        this.share_url = share_url;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGifitemBeanDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getNETid() {
        return NETid;
    }

    public void setNETid(long NETid) {
        this.NETid = NETid;
    }

    /** Not-null value. */
    public String getContent() {
        return content;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContent(String content) {
        this.content = content;
    }

    /** Not-null value. */
    public String getCategory_name() {
        return category_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCategory_name(String category_name) {
        this.category_name = category_name;
    }

    /** Not-null value. */
    public String getFirstOne() {
        return firstOne;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFirstOne(String firstOne) {
        this.firstOne = firstOne;
    }

    public String getGifUrl() {
        return gifUrl;
    }

    public void setGifUrl(String gifUrl) {
        this.gifUrl = gifUrl;
    }

    public int getWidth() {
        return width;
    }

    public void setWidth(int width) {
        this.width = width;
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public int getDigg_count() {
        return digg_count;
    }

    public void setDigg_count(int digg_count) {
        this.digg_count = digg_count;
    }

    public int getBury_count() {
        return bury_count;
    }

    public void setBury_count(int bury_count) {
        this.bury_count = bury_count;
    }

    public int getComments_count() {
        return comments_count;
    }

    public void setComments_count(int comments_count) {
        this.comments_count = comments_count;
    }

    /** Not-null value. */
    public String getShare_url() {
        return share_url;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setShare_url(String share_url) {
        this.share_url = share_url;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PictureBean> getLarge_image_list() {
        if (large_image_list == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PictureBeanDao targetDao = daoSession.getPictureBeanDao();
            List<PictureBean> large_image_listNew = targetDao._queryGifitemBean_Large_image_list(id);
            synchronized (this) {
                if(large_image_list == null) {
                    large_image_list = large_image_listNew;
                }
            }
        }
        return large_image_list;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLarge_image_list() {
        large_image_list = null;
    }


    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    public CommentsBean getComments() {
        if(comments==null){
            return DBHelper.loadCommentsBean(NETid);
        }
        return comments;
    }

    public void setComments(CommentsBean comments) {
        this.comments = comments;
        comments.setNETid(NETid);
        DBHelper.insertIntoCommentsBean(comments);
    }

    public ReleaseUser getReleaseUser() {
        if(releaseUser==null){
            return DBHelper.loadReleaseUser(NETid);
        }
        return releaseUser;
    }

    public void setReleaseUser(ReleaseUser releaseUser) {
        this.releaseUser = releaseUser;
        releaseUser.setNETid(NETid);
        DBHelper.insertIntoReleaseUser(releaseUser);
    }

    @Override
    public String toString() {
        return "GifitemBean{" +
                "id=" + id +
                ", NETid=" + NETid +
                ", content='" + content + '\'' +
                ", category_name='" + category_name + '\'' +
                ", firstOne='" + firstOne + '\'' +
                ", gifUrl='" + gifUrl + '\'' +
                ", width=" + width +
                ", height=" + height +
                ", type=" + type +
                ", digg_count=" + digg_count +
                ", bury_count=" + bury_count +
                ", comments_count=" + comments_count +
                ", share_url='" + share_url + '\'' +
                ", daoSession=" + daoSession +
                ", myDao=" + myDao +
                ", large_image_list=" + large_image_list +
                ", comments=" + comments +
                ", releaseUser=" + releaseUser +
                '}';
    }
}
