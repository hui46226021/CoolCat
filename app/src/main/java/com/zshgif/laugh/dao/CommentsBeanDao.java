package com.zshgif.laugh.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zshgif.laugh.dao.db.DaoSession;
import com.zshgif.laugh.model.CommentsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COMMENTSBEAN.
*/
public class CommentsBeanDao extends AbstractDao<CommentsBean, Long> {

    public static final String TABLENAME = "COMMENTSBEAN";

    /**
     * Properties of entity CommentsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NETid = new Property(1, long.class, "NETid", false, "NETID");
        public final static Property CommentUserName = new Property(2, String.class, "commentUserName", false, "COMMENT_USER_NAME");
        public final static Property CommentUserProfile = new Property(3, String.class, "commentUserProfile", false, "COMMENT_USER_PROFILE");
        public final static Property Comment = new Property(4, String.class, "comment", false, "COMMENT");
    };


    public CommentsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CommentsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COMMENTSBEAN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NETID' INTEGER NOT NULL ," + // 1: NETid
                "'COMMENT_USER_NAME' TEXT NOT NULL ," + // 2: commentUserName
                "'COMMENT_USER_PROFILE' TEXT NOT NULL ," + // 3: commentUserProfile
                "'COMMENT' TEXT NOT NULL );"); // 4: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMMENTSBEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CommentsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNETid());
        stmt.bindString(3, entity.getCommentUserName());
        stmt.bindString(4, entity.getCommentUserProfile());
        stmt.bindString(5, entity.getComment());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CommentsBean readEntity(Cursor cursor, int offset) {
        CommentsBean entity = new CommentsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // NETid
            cursor.getString(offset + 2), // commentUserName
            cursor.getString(offset + 3), // commentUserProfile
            cursor.getString(offset + 4) // comment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CommentsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNETid(cursor.getLong(offset + 1));
        entity.setCommentUserName(cursor.getString(offset + 2));
        entity.setCommentUserProfile(cursor.getString(offset + 3));
        entity.setComment(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CommentsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CommentsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
