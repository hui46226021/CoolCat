package com.zshgif.laugh.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.zshgif.laugh.dao.db.DaoSession;
import com.zshgif.laugh.model.PictureBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PICTUREBEAN.
*/
public class PictureBeanDao extends AbstractDao<PictureBean, Long> {

    public static final String TABLENAME = "PICTUREBEAN";

    /**
     * Properties of entity PictureBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LargeImage = new Property(1, String.class, "largeImage", false, "LARGE_IMAGE");
        public final static Property ThumbImage = new Property(2, String.class, "thumbImage", false, "THUMB_IMAGE");
        public final static Property Large_image_listId = new Property(3, long.class, "large_image_listId", false, "LARGE_IMAGE_LIST_ID");
    };

    private Query<PictureBean> gifitemBean_Large_image_listQuery;

    public PictureBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PictureBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PICTUREBEAN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LARGE_IMAGE' TEXT NOT NULL ," + // 1: largeImage
                "'THUMB_IMAGE' TEXT NOT NULL ," + // 2: thumbImage
                "'LARGE_IMAGE_LIST_ID' INTEGER NOT NULL );"); // 3: large_image_listId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PICTUREBEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PictureBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLargeImage());
        stmt.bindString(3, entity.getThumbImage());
        stmt.bindLong(4, entity.getLarge_image_listId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PictureBean readEntity(Cursor cursor, int offset) {
        PictureBean entity = new PictureBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // largeImage
            cursor.getString(offset + 2), // thumbImage
            cursor.getLong(offset + 3) // large_image_listId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PictureBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLargeImage(cursor.getString(offset + 1));
        entity.setThumbImage(cursor.getString(offset + 2));
        entity.setLarge_image_listId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PictureBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PictureBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "large_image_list" to-many relationship of GifitemBean. */
    public List<PictureBean> _queryGifitemBean_Large_image_list(long large_image_listId) {
        synchronized (this) {
            if (gifitemBean_Large_image_listQuery == null) {
                QueryBuilder<PictureBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Large_image_listId.eq(null));
                gifitemBean_Large_image_listQuery = queryBuilder.build();
            }
        }
        Query<PictureBean> query = gifitemBean_Large_image_listQuery.forCurrentThread();
        query.setParameter(0, large_image_listId);
        return query.list();
    }

}
