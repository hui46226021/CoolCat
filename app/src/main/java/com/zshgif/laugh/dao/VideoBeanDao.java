package com.zshgif.laugh.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.zshgif.laugh.dao.db.DaoSession;
import com.zshgif.laugh.model.VideoBean;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VIDEO_BEAN.
*/
public class VideoBeanDao extends AbstractDao<VideoBean, Long> {

    public static final String TABLENAME = "VIDEO_BEAN";

    /**
     * Properties of entity VideoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NETid = new Property(1, long.class, "NETid", false, "NETID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Category_name = new Property(3, String.class, "category_name", false, "CATEGORY_NAME");
        public final static Property FirstOne = new Property(4, String.class, "firstOne", false, "FIRST_ONE");
        public final static Property VideoUrl = new Property(5, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property TimeLenth = new Property(6, int.class, "timeLenth", false, "TIME_LENTH");
        public final static Property Width = new Property(7, int.class, "width", false, "WIDTH");
        public final static Property Height = new Property(8, int.class, "height", false, "HEIGHT");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
        public final static Property Digg_count = new Property(10, int.class, "digg_count", false, "DIGG_COUNT");
        public final static Property Bury_count = new Property(11, int.class, "bury_count", false, "BURY_COUNT");
        public final static Property Comments_count = new Property(12, int.class, "comments_count", false, "COMMENTS_COUNT");
        public final static Property Share_url = new Property(13, String.class, "share_url", false, "SHARE_URL");
    };


    public VideoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VideoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VIDEO_BEAN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NETID' INTEGER NOT NULL ," + // 1: NETid
                "'CONTENT' TEXT NOT NULL ," + // 2: content
                "'CATEGORY_NAME' TEXT NOT NULL ," + // 3: category_name
                "'FIRST_ONE' TEXT NOT NULL ," + // 4: firstOne
                "'VIDEO_URL' TEXT," + // 5: videoUrl
                "'TIME_LENTH' INTEGER NOT NULL ," + // 6: timeLenth
                "'WIDTH' INTEGER NOT NULL ," + // 7: width
                "'HEIGHT' INTEGER NOT NULL ," + // 8: height
                "'TYPE' INTEGER NOT NULL ," + // 9: type
                "'DIGG_COUNT' INTEGER NOT NULL ," + // 10: digg_count
                "'BURY_COUNT' INTEGER NOT NULL ," + // 11: bury_count
                "'COMMENTS_COUNT' INTEGER NOT NULL ," + // 12: comments_count
                "'SHARE_URL' TEXT NOT NULL );"); // 13: share_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VIDEO_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VideoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNETid());
        stmt.bindString(3, entity.getContent());
        stmt.bindString(4, entity.getCategory_name());
        stmt.bindString(5, entity.getFirstOne());
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(6, videoUrl);
        }
        stmt.bindLong(7, entity.getTimeLenth());
        stmt.bindLong(8, entity.getWidth());
        stmt.bindLong(9, entity.getHeight());
        stmt.bindLong(10, entity.getType());
        stmt.bindLong(11, entity.getDigg_count());
        stmt.bindLong(12, entity.getBury_count());
        stmt.bindLong(13, entity.getComments_count());
        stmt.bindString(14, entity.getShare_url());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VideoBean readEntity(Cursor cursor, int offset) {
        VideoBean entity = new VideoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // NETid
            cursor.getString(offset + 2), // content
            cursor.getString(offset + 3), // category_name
            cursor.getString(offset + 4), // firstOne
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // videoUrl
            cursor.getInt(offset + 6), // timeLenth
            cursor.getInt(offset + 7), // width
            cursor.getInt(offset + 8), // height
            cursor.getInt(offset + 9), // type
            cursor.getInt(offset + 10), // digg_count
            cursor.getInt(offset + 11), // bury_count
            cursor.getInt(offset + 12), // comments_count
            cursor.getString(offset + 13) // share_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VideoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNETid(cursor.getLong(offset + 1));
        entity.setContent(cursor.getString(offset + 2));
        entity.setCategory_name(cursor.getString(offset + 3));
        entity.setFirstOne(cursor.getString(offset + 4));
        entity.setVideoUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeLenth(cursor.getInt(offset + 6));
        entity.setWidth(cursor.getInt(offset + 7));
        entity.setHeight(cursor.getInt(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
        entity.setDigg_count(cursor.getInt(offset + 10));
        entity.setBury_count(cursor.getInt(offset + 11));
        entity.setComments_count(cursor.getInt(offset + 12));
        entity.setShare_url(cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VideoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VideoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
